// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  goals        Goal[]
  transactions Transaction[]

  @@map("users")
}

// Goal model for user goals and stakes
model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  startDate   DateTime @default(now())
  endDate     DateTime
  stakeAmount Decimal  @db.Decimal(10, 2)
  status      GoalStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  progressLogs ProgressLog[]
  transactions Transaction[]

  @@map("goals")
}

// Progress tracking for daily check-ins
model ProgressLog {
  id        String   @id @default(cuid())
  goalId    String
  date      DateTime @db.Date
  checkedIn Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now())

  // Relations
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([goalId, date])
  @@map("progress_logs")
}

// Transaction model for payment tracking
model Transaction {
  id        String            @id @default(cuid())
  userId    String
  goalId    String?
  amount    Decimal           @db.Decimal(10, 2)
  type      TransactionType
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal Goal? @relation(fields: [goalId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

// Enums
enum GoalStatus {
  ACTIVE
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  REFUND
  FORFEIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
